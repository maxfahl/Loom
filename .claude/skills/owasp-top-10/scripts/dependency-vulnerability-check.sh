#!/bin/bash

# dependency-vulnerability-check.sh
#
# Purpose: Automates the scanning of project dependencies for known vulnerabilities
# using common package managers (npm, pip). This helps address A06:2021-Vulnerable
# and Outdated Components by providing a quick way to identify and report security
# issues in third-party libraries.
#
# Usage:
#   ./dependency-vulnerability-check.sh --path <project-path> [--package-manager <manager>] [--output <file>] [--fail-on-vulnerabilities]
#
# Examples:
#   ./dependency-vulnerability-check.sh --path ./my-nodejs-app
#   ./dependency-vulnerability-check.sh --path ./my-python-app --package-manager pip
#   ./dependency-vulnerability-check.sh --path ./my-nodejs-app --output security-report.txt --fail-on-vulnerabilities
#
# Requirements:
#   - npm (for Node.js projects) or pip (for Python projects) installed.
#   - For pip, 'pip-audit' needs to be installed: pip install pip-audit

# --- Configuration ---
PROJECT_PATH=""
PACKAGE_MANAGER="auto" # auto, npm, pip
OUTPUT_FILE=""
FAIL_ON_VULNERABILITIES=false

# ANSI escape codes for colored output
COLOR_GREEN='\033[92m'
COLOR_RED='\033[91m'
COLOR_YELLOW='\033[93m'
COLOR_BLUE='\033[94m'
COLOR_RESET='\033[0m'

# --- Functions ---

# Function to display script usage
usage() {
    echo "Usage: $0 --path <project-path> [--package-manager <manager>] [--output <file>] [--fail-on-vulnerabilities] [--help]"
    echo ""
    echo "  --path <project-path>           : (Required) The absolute or relative path to the project directory."
    echo "  --package-manager <manager>     : (Optional) Specify 'npm' or 'pip'. If 'auto', it tries to detect. Defaults to 'auto'."
    echo "  --output <file>                 : (Optional) Save the vulnerability report to a specified file."
    echo "  --fail-on-vulnerabilities       : (Optional) If set, the script will exit with a non-zero code if vulnerabilities are found."
    echo "  --help                          : Display this help message."
    exit 1
}

# Function to parse command-line arguments
parse_args() {
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --path)
                PROJECT_PATH="$2"
                shift
                ;;
            --package-manager)
                PACKAGE_MANAGER="$2"
                shift
                ;;
            --output)
                OUTPUT_FILE="$2"
                shift
                ;;
            --fail-on-vulnerabilities)
                FAIL_ON_VULNERABILITIES=true
                ;;
            --help)
                usage
                ;;
            *)
                echo -e "${COLOR_RED}Error: Unknown parameter: $1${COLOR_RESET}"
                usage
                ;;
        esac
        shift
    done

    if [[ -z "$PROJECT_PATH" ]]; then
        echo -e "${COLOR_RED}Error: --path is a required parameter.${COLOR_RESET}"
        usage
    fi

    if [[ ! -d "$PROJECT_PATH" ]]; then
        echo -e "${COLOR_RED}Error: Project path '$PROJECT_PATH' does not exist or is not a directory.${COLOR_RESET}"
        exit 1
    fi
}

# Function to run npm audit
run_npm_audit() {
    echo -e "${COLOR_BLUE}Running npm audit in $PROJECT_PATH...${COLOR_RESET}"
    if [[ -n "$OUTPUT_FILE" ]]; then
        npm audit --json > "$OUTPUT_FILE"
        NPM_EXIT_CODE=$?
        echo -e "${COLOR_GREEN}npm audit report saved to $OUTPUT_FILE${COLOR_RESET}"
    else
        npm audit
        NPM_EXIT_CODE=$?
    fi

    if [[ $NPM_EXIT_CODE -ne 0 ]]; then
        echo -e "${COLOR_YELLOW}npm audit found vulnerabilities.${COLOR_RESET}"
        return 1
    else
        echo -e "${COLOR_GREEN}npm audit found no vulnerabilities.${COLOR_RESET}"
        return 0
    fi
}

# Function to run pip audit
run_pip_audit() {
    echo -e "${COLOR_BLUE}Running pip-audit in $PROJECT_PATH...${COLOR_RESET}"
    if ! command -v pip-audit &> /dev/null; then
        echo -e "${COLOR_RED}Error: pip-audit is not installed. Please install it using 'pip install pip-audit'.${COLOR_RESET}"
        return 1
    fi

    if [[ -n "$OUTPUT_FILE" ]]; then
        pip-audit --json > "$OUTPUT_FILE"
        PIP_EXIT_CODE=$?
        echo -e "${COLOR_GREEN}pip-audit report saved to $OUTPUT_FILE${COLOR_RESET}"
    else
        pip-audit
        PIP_EXIT_CODE=$?
    fi

    if [[ $PIP_EXIT_CODE -ne 0 ]]; then
        echo -e "${COLOR_YELLOW}pip-audit found vulnerabilities.${COLOR_RESET}"
        return 1
    else
        echo -e "${COLOR_GREEN}pip-audit found no vulnerabilities.${COLOR_RESET}"
        return 0
    fi
}

# --- Main Script Logic ---

parse_args "$@"

cd "$PROJECT_PATH" || {
    echo -e "${COLOR_RED}Error: Could not change directory to $PROJECT_PATH.${COLOR_RESET}"
    exit 1
}

VULNERABILITIES_FOUND=false

if [[ "$PACKAGE_MANAGER" == "npm" ]]; then
    run_npm_audit || VULNERABILITIES_FOUND=true
elif [[ "$PACKAGE_MANAGER" == "pip" ]]; then
    run_pip_audit || VULNERABILITIES_FOUND=true
elif [[ "$PACKAGE_MANAGER" == "auto" ]]; then
    if [[ -f "package.json" ]]; then
        echo -e "${COLOR_BLUE}Detected Node.js project (package.json). Running npm audit...${COLOR_RESET}"
        run_npm_audit || VULNERABILITIES_FOUND=true
    elif [[ -f "requirements.txt" || -f "pyproject.toml" ]]; then
        echo -e "${COLOR_BLUE}Detected Python project (requirements.txt/pyproject.toml). Running pip-audit...${COLOR_RESET}"
        run_pip_audit || VULNERABILITIES_FOUND=true
    else
        echo -e "${COLOR_RED}Error: Could not automatically detect package manager. Please specify with --package-manager (npm or pip).${COLOR_RESET}"
        exit 1
    fi
else
    echo -e "${COLOR_RED}Error: Invalid package manager specified: $PACKAGE_MANAGER. Must be 'npm', 'pip', or 'auto'.${COLOR_RESET}"
    exit 1
fi

if $FAIL_ON_VULNERABILITIES && $VULNERABILITIES_FOUND; then
    echo -e "${COLOR_RED}Exiting with error code due to detected vulnerabilities (fail-on-vulnerabilities flag is set).${COLOR_RESET}"
    exit 1
elif $VULNERABILITIES_FOUND; then
    echo -e "${COLOR_YELLOW}Vulnerabilities were found. Please review the report.${COLOR_RESET}"
    exit 0
else
    echo -e "${COLOR_GREEN}No vulnerabilities detected.${COLOR_RESET}"
    exit 0
fi
