\nimport express, { Request, Response, NextFunction } from \'express\';\nimport { v4 as uuidv4 } from \'uuid\';\n\n// Mock Database\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst users: User[] = [];\n\n// Helper for error responses\nclass ApiError extends Error {\n  statusCode: number;\n  code: string;\n  details?: any[];\n\n  constructor(statusCode: number, code: string, message: string, details?: any[]) {\n    super(message);\n    this.statusCode = statusCode;\n    this.code = code;\n    this.details = details;\n  }\n}\n\n// Middleware for input validation (simplified)\nconst validateUser = (req: Request, res: Response, next: NextFunction) => {\n  const { name, email } = req.body;\n  if (!name || !email) {\n    throw new ApiError(400, \'INVALID_INPUT\', \'Name and email are required.\', [\n      { field: \'name\', issue: \'Name is required\' },\n      { field: \'email\', issue: \'Email is required\' },\n    ]);\n  }\n  // Basic email format validation\n  if (!/^[^\s@]+@[^\s@]+\\.[^\s@]+$/.test(email)) {\n    throw new ApiError(400, \'INVALID_INPUT\', \'Invalid email format.\', [\n      { field: \'email\', issue: \'Invalid email format\' },\n    ]);\n  }\n  next();\n};\n\nconst app = express();\napp.use(express.json());\n\n// --- Routes ---\n\n// GET /v1/users - Get all users with pagination\napp.get(\'/v1/users\', (req: Request, res: Response) => {\n  const limit = parseInt(req.query.limit as string) || 10;\n  const offset = parseInt(req.query.offset as string) || 0;\n\n  const paginatedUsers = users.slice(offset, offset + limit);\n  res.status(200).json(paginatedUsers);\n});\n\n// GET /v1/users/:userId - Get user by ID\napp.get(\'/v1/users/:userId\', (req: Request, res: Response, next: NextFunction) => {\n  const { userId } = req.params;\n  const user = users.find(u => u.id === userId);\n\n  if (!user) {\n    throw new ApiError(404, \'NOT_FOUND\', `User with ID \'${userId}\' not found.`);\n  }\n  res.status(200).json(user);\n});\n\n// POST /v1/users - Create a new user\napp.post(\'/v1/users\', validateUser, (req: Request, res: Response) => {\n  const { name, email } = req.body;\n  const now = new Date().toISOString();\n  const newUser: User = {\n    id: uuidv4(),\n    name,\n    email,\n    createdAt: now,\n    updatedAt: now,\n  };\n  users.push(newUser);\n  res.status(201).json(newUser);\n});\n\n// PUT /v1/users/:userId - Update an existing user\napp.put(\'/v1/users/:userId\', validateUser, (req: Request, res: Response, next: NextFunction) => {\n  const { userId } = req.params;\n  const { name, email } = req.body;\n  const userIndex = users.findIndex(u => u.id === userId);\n\n  if (userIndex === -1) {\n    throw new ApiError(404, \'NOT_FOUND\', `User with ID \'${userId}\' not found.`);\n  }\n\n  const updatedUser = { ...users[userIndex], name, email, updatedAt: new Date().toISOString() };\n  users[userIndex] = updatedUser;\n  res.status(200).json(updatedUser);\n});\n\n// DELETE /v1/users/:userId - Delete a user\napp.delete(\'/v1/users/:userId\', (req: Request, res: Response, next: NextFunction) => {\n  const { userId } = req.params;\n  const initialLength = users.length;\n  users.splice(users.findIndex(u => u.id === userId), 1);\n\n  if (users.length === initialLength) {\n    throw new ApiError(404, \'NOT_FOUND\', `User with ID \'${userId}\' not found.`);\n  }\n  res.status(204).send(); // No Content\n});\n\n// --- Error Handling Middleware ---\napp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n  if (err instanceof ApiError) {\n    return res.status(err.statusCode).json({\n      status: \'error\',\n      code: err.code,\n      message: err.message,\n      details: err.details,\n    });\n  }\n  console.error(err);\n  res.status(500).json({\n    status: \'error\',\n    code: \'INTERNAL_SERVER_ERROR\',\n    message: \'An unexpected error occurred.\',\n  });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`REST User Service running on port ${PORT}`);\n  console.log(`Try: GET http://localhost:${PORT}/v1/users`);\n  console.log(`Try: POST http://localhost:${PORT}/v1/users with body { \"name\": \"Test User\", \"email\": \"test@example.com\" }`);\n});\n