
openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: A simple API for managing users.
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server
tags:
  - name: Users
    description: User management operations
paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - Users
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of users to return
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of users to skip for pagination
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}:
    get:
      summary: Get user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the user to retrieve
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update an existing user
      operationId: updateUser
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser' # Reusing NewUser for simplicity, but could be a separate UpdateUser schema
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully (No Content)
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          description: Full name of the user
          example: Jane Doe
        email:
          type: string
          format: email
          description: Email address of the user
          example: jane.doe@example.com
        createdAt:
          type: string
          format: date-time
          description: Date and time the user was created
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Date and time the user was last updated
          readOnly: true
    NewUser:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: Full name of the user
          example: John Smith
        email:
          type: string
          format: email
          description: Email address of the user
          example: john.smith@example.com
  responses:
    BadRequestError:
      description: Bad Request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: Not Found - The requested resource could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal Server Error - Something went wrong on the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ErrorResponse:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: string
          example: error
        code:
          type: string
          example: INVALID_INPUT
        message:
          type: string
          example: "Validation failed: Email is required."
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              issue:
                type: string
