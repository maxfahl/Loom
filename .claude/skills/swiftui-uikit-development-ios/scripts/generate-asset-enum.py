import os
import argparse
import re

def to_swift_identifier(name):
    """Converts a string to a valid Swift identifier (camelCase)."""
    # Remove invalid characters and replace spaces/hyphens with camelCase
    name = re.sub(r'[^a-zA-Z0-9_]', '', name)
    if not name: # Handle empty string after cleaning
        return ""
    
    components = name.split('_')
    camel_cased_name = components[0].lower() + ''.join(word.capitalize() for word in components[1:])
    
    # Ensure it starts with a letter or underscore if it started with a number
    if re.match(r'^\d', camel_cased_name):
        camel_cased_name = "_" + camel_cased_name
        
    return camel_cased_name

def generate_asset_enum(xcassets_path, output_file_path):
    """ 
    Scans an Assets.xcassets directory and generates a type-safe Swift enum
    for image and color assets.
    """
    image_assets = []
    color_assets = []

    if not os.path.isdir(xcassets_path):
        print(f"Error: Assets catalog path '{xcassets_path}' does not exist or is not a directory.")
        return

    for root, dirs, files in os.walk(xcassets_path):
        for d in dirs:
            if d.endswith('.imageset'):
                asset_name = os.path.splitext(d)[0]
                image_assets.append(asset_name)
            elif d.endswith('.colorset'):
                asset_name = os.path.splitext(d)[0]
                color_assets.append(asset_name)

    image_assets = sorted(list(set(image_assets)))
    color_assets = sorted(list(set(color_assets)))

    swift_code = """
//
//  Assets.swift
//  Generated by generate-asset-enum.py
//
//  This file was automatically generated. DO NOT MODIFY IT. 
//  To regenerate, run: python generate-asset-enum.py <path/to/Assets.xcassets> <output/path/Assets.swift>
//

import SwiftUI
import UIKit

extension Image {
    enum Asset {
"

    if image_assets:
        for asset in image_assets:
            swift_code += f"        static let {to_swift_identifier(asset)} = Image(\"{asset}\")\n"
    else:
        swift_code += "        // No image assets found.\n"

    swift_code += """
    }
}

extension Color {
    enum Asset {
"""

    if color_assets:
        for asset in color_assets:
            swift_code += f"        static let {to_swift_identifier(asset)} = Color(\"{asset}\")\n"
    else:
        swift_code += "        // No color assets found.\n"

    swift_code += """
    }
}

extension UIImage {
    enum Asset {
"""

    if image_assets:
        for asset in image_assets:
            swift_code += f"        static let {to_swift_identifier(asset)} = UIImage(named: \"{asset}\")\n"
    else:
        swift_code += "        // No image assets found.\n"

    swift_code += """
    }
}

extension UIColor {
    enum Asset {
"""

    if color_assets:
        for asset in color_assets:
            swift_code += f"        static let {to_swift_identifier(asset)} = UIColor(named: \"{asset}\")\n"
    else:
        swift_code += "        // No color assets found.\n"

    swift_code += """
    }
}
"""

    try:
        os.makedirs(os.path.dirname(output_file_path), exist_ok=True)
        with open(output_file_path, 'w') as f:
            f.write(swift_code)
        print(f"Successfully generated asset enum to '{output_file_path}'")
    except IOError as e:
        print(f"Error writing to file '{output_file_path}': {e}")

def main():
    parser = argparse.ArgumentParser(
        description="Generate a type-safe Swift enum for image and color assets from an Assets.xcassets catalog."
    )
    parser.add_argument(
        "xcassets_path",
        type=str,
        help="Path to the Assets.xcassets directory (e.g., 'MyProject/Assets.xcassets')"
    )
    parser.add_argument(
        "output_file_path",
        type=str,
        help="Path to the output Swift file (e.g., 'MyProject/Sources/Assets.swift')"
    )

    args = parser.parse_args()

    generate_asset_enum(args.xcassets_path, args.output_file_path)

if __name__ == "__main__":
    main()
