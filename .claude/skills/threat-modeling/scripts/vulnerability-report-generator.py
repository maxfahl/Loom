#!/usr/bin/env python3

import argparse
import json
import csv
import os
from datetime import datetime

def load_vulnerabilities(file_path):
    """Loads vulnerabilities from a JSON or CSV file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            if file_path.endswith('.json'):
                return json.load(f)
            elif file_path.endswith('.csv'):
                reader = csv.DictReader(f)
                return list(reader)
            else:
                raise ValueError("Unsupported file format. Please use .json or .csv")
    except FileNotFoundError:
        print(f"Error: Vulnerability data file not found at {file_path}")
        exit(1)
    except (json.JSONDecodeError, csv.Error) as e:
        print(f"Error parsing vulnerability data file {file_path}: {e}")
        exit(1)

def generate_markdown_report(project_name, vulnerabilities, output_file):
    """Generates a vulnerability report in Markdown format."""
    report_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_content = f"""# Vulnerability Report for {project_name}

**Generated On:** {report_date}

## Overview
This report summarizes the identified vulnerabilities for the {project_name} project.

## Summary by Severity
*   Critical: {sum(1 for v in vulnerabilities if v.get('severity', '').lower() == 'critical')}
*   High: {sum(1 for v in vulnerabilities if v.get('severity', '').lower() == 'high')}
*   Medium: {sum(1 for v in vulnerabilities if v.get('severity', '').lower() == 'medium')}
*   Low: {sum(1 for v in vulnerabilities if v.get('severity', '').lower() == 'low')}

## Detailed Vulnerabilities

"""

    if not vulnerabilities:
        report_content += "No vulnerabilities identified."
    else:
        # Sort by severity: Critical, High, Medium, Low, then by ID
        severity_order = {'critical': 0, 'high': 1, 'medium': 2, 'low': 3}
        sorted_vulnerabilities = sorted(
            vulnerabilities,
            key=lambda x: (severity_order.get(x.get('severity', '').lower(), 99), x.get('id', ''))
        )

        for i, vuln in enumerate(sorted_vulnerabilities, 1):
            report_content += f"""---
### {i}. {vuln.get('title', 'N/A')} (ID: {vuln.get('id', 'N/A')})

*   **Severity:** {vuln.get('severity', 'N/A')}
*   **Likelihood:** {vuln.get('likelihood', 'N/A')}
*   **Impact:** {vuln.get('impact', 'N/A')}
*   **Status:** {vuln.get('status', 'Open')}

#### Description
{vuln.get('description', 'No description provided.')}

#### Countermeasures / Remediation
{vuln.get('countermeasures', 'No countermeasures suggested.')}

"""

    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        print(f"Vulnerability report generated successfully at: {output_file}")
    except IOError as e:
        print(f"Error writing report to {output_file}: {e}")
        exit(1)

def main():
    parser = argparse.ArgumentParser(
        description="Generate a formatted vulnerability report from JSON or CSV data.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "data_file",
        help="Path to the vulnerability data file (JSON or CSV format)."
    )
    parser.add_argument(
        "-n", "--project-name",
        default="Project",
        help="Name of the project for the report."
    )
    parser.add_argument(
        "-o", "--output",
        default="vulnerability_report.md",
        help="Output file name for the Markdown report. Default: vulnerability_report.md"
    )

    args = parser.parse_args()

    print(f"Loading vulnerability data from {args.data_file}...")
    vulnerabilities = load_vulnerabilities(args.data_file)

    print("Generating Markdown report...")
    generate_markdown_report(args.project_name, vulnerabilities, args.output)

if __name__ == "__main__":
    main()
