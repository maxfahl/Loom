#!/usr/bin/env ts-node

/**
 * design-token-sync.ts: Design Token Synchronization Script
 *
 * This script reads design tokens from a JSON file and generates two output files:
 * 1. A CSS file with custom properties (CSS variables) for easy theming.
 * 2. A TypeScript declaration file with types for the token names, enabling type-safe access.
 *
 * Dependencies:
 *   - typescript: `npm install -g typescript` or `npm install --save-dev typescript`
 *   - ts-node: `npm install -g ts-node` or `npm install --save-dev ts-node`
 *
 * Usage:
 *   ts-node design-token-sync.ts --input tokens.json [--output-css _variables.css] [--output-ts _tokens.d.ts]
 *
 * Examples:
 *   # Generate CSS variables and TypeScript types from a tokens.json file
 *   ts-node design-token-sync.ts --input ../../design-tokens/tokens.json --output-css ../../src/styles/_variables.css --output-ts ../../src/types/_tokens.d.ts
 *
 *   # Use default output paths
 *   ts-node design-token-sync.ts --input tokens.json
 */

import * as fs from 'fs';
import * as path from 'path';
import { program } from 'commander';

interface DesignTokens {
  [key: string]: string | DesignTokens;
}

// Function to flatten tokens and generate CSS variables
function generateCssVariables(tokens: DesignTokens, prefix: string = '--', cssVars: string[] = []): string[] {
  for (const key in tokens) {
    if (Object.prototype.hasOwnProperty.call(tokens, key)) {
      const value = tokens[key];
      const varName = `${prefix}${kebabCase(key)}`;

      if (typeof value === 'object' && value !== null) {
        generateCssVariables(value as DesignTokens, `${varName}-`, cssVars);
      } else {
        cssVars.push(`${varName}: ${value};`);
      }
    }
  }
  return cssVars;
}

// Function to generate TypeScript types
function generateTsTypes(tokens: DesignTokens, prefix: string = '', tsTypes: string[] = []): string[] {
  for (const key in tokens) {
    if (Object.prototype.hasOwnProperty.call(tokens, key)) {
      const value = tokens[key];
      const typeName = prefix ? `${prefix}.${key}` : key;

      if (typeof value === 'object' && value !== null) {
        generateTsTypes(value as DesignTokens, typeName, tsTypes);
      } else {
        tsTypes.push(`  ${key}: string;`);
      }
    }
  }
  return tsTypes;
}

function kebabCase(str: string): string {
  return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2').toLowerCase();
}

program
  .version('1.0.0')
  .description('Generates CSS variables and TypeScript types from a JSON design token file.')
  .requiredOption('-i, --input <path>', 'Path to the input JSON design token file.')
  .option('-c, --output-css <path>', 'Path for the output CSS variables file.', '_variables.css')
  .option('-t, --output-ts <path>', 'Path for the output TypeScript declaration file.', '_tokens.d.ts')
  .parse(process.argv);

const options = program.opts();

const inputPath = path.resolve(process.cwd(), options.input);
const outputCssPath = path.resolve(process.cwd(), options.outputCss);
const outputTsPath = path.resolve(process.cwd(), options.outputTs);

try {
  const tokensContent = fs.readFileSync(inputPath, 'utf-8');
  const designTokens: DesignTokens = JSON.parse(tokensContent);

  // Generate CSS variables
  const cssVariables = generateCssVariables(designTokens);
  const cssOutput = `/* Generated by design-token-sync.ts */\n:root {\n${cssVariables.map(v => `  ${v}`).join('\n')}\n}\n`;
  fs.writeFileSync(outputCssPath, cssOutput, 'utf-8');
  console.log(`Generated CSS variables to: ${outputCssPath}`);

  // Generate TypeScript types
  const tsTypes = generateTsTypes(designTokens);
  const tsOutput = `// Generated by design-token-sync.ts\ndeclare module './_tokens' {\n  export interface DesignTokens {\n${tsTypes.join('\n')}\n  }\n}\n`;
  fs.writeFileSync(outputTsPath, tsOutput, 'utf-8');
  console.log(`Generated TypeScript types to: ${outputTsPath}`);

} catch (error: any) {
  console.error(`Error: ${error.message}`);
  process.exit(1);
}
