#!/bin/bash

# service-scaffold.sh
#
# Purpose:
#   Automates the creation of a new microservice project with a basic structure,
#   Dockerfile, and docker-compose.yml for local development.
#   Ensures consistent project setup and reduces boilerplate.
#
# Usage:
#   ./service-scaffold.sh <service_name> [--port <port_number>] [--no-docker] [--help]
#
# Examples:
#   ./service-scaffold.sh user-service
#   ./service-scaffold.sh product-catalog --port 3001
#   ./service-scaffold.sh analytics-worker --no-docker
#   ./service-scaffold.sh --help
#
# Configuration:
#   - Default port: 3000 (can be overridden with --port)
#   - Docker files are generated by default (can be skipped with --no-docker)
#
# Error Handling:
#   - Exits if service name is not provided.
#   - Exits if the service directory already exists.
#   - Provides clear error messages.
#
# Dry-run mode: Not applicable for this script as it creates files.
#
# Colored Output:
#   Uses ANSI escape codes for colored output (green for success, red for error, yellow for warnings).

# --- Helper Functions ---

# Colors for output
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
NC="\033[0m" # No Color

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1" >&2
  exit 1
}

log_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

show_help() {
  echo "Usage: $0 <service_name> [--port <port_number>] [--no-docker] [--help]"
  echo ""
  echo "Purpose:"
  echo "  Automates the creation of a new microservice project with a basic structure,"
  echo "  Dockerfile, and docker-compose.yml for local development."
  echo "  Ensures consistent project setup and reduces boilerplate."
  echo ""
  echo "Arguments:"
  echo "  <service_name>  The name of the microservice (e.g., 'user-service')."
  echo ""
  echo "Options:"
  echo "  --port <port_number>  Specify the port for the service (default: 3000)."
  echo "  --no-docker           Skip generating Dockerfile and docker-compose.yml."
  echo "  --help                Display this help message."
  echo ""
  echo "Examples:"
  echo "  $0 user-service"
  echo "  $0 product-catalog --port 3001"
  echo "  $0 analytics-worker --no-docker"
  echo "  $0 --help"
  exit 0
}

# --- Main Script Logic ---

SERVICE_NAME=""
SERVICE_PORT=3000
GENERATE_DOCKER=true

# Parse arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --port)
      if [[ -z "$2" || "$2" =~ ^- ]]; then
        log_error "Missing value for --port. Please provide a port number."
      fi
      SERVICE_PORT="$2"
      shift
      ;; 
    --no-docker)
      GENERATE_DOCKER=false
      ;; 
    --help)
      show_help
      ;; 
    -*)
      log_error "Unknown option: $1. Use --help for usage."
      ;; 
    *)
      if [[ -z "$SERVICE_NAME" ]]; then
        SERVICE_NAME="$1"
      else
        log_error "Too many arguments. Service name already provided as '$SERVICE_NAME'."
      fi
      ;; 
  esac
  shift
done

if [[ -z "$SERVICE_NAME" ]]; then
  log_error "Service name not provided. Use --help for usage."
fi

SERVICE_DIR="./$SERVICE_NAME"

if [[ -d "$SERVICE_DIR" ]]; then
  log_error "Directory '$SERVICE_DIR' already exists. Please choose a different service name or remove the existing directory."
fi

log_success "Creating new microservice: ${SERVICE_NAME}..."

# Create service directory structure
mkdir -p "$SERVICE_DIR/src/controllers" \
         "$SERVICE_DIR/src/services" \
         "$SERVICE_DIR/src/models" \
         "$SERVICE_DIR/tests" \
         "$SERVICE_DIR/config"

log_success "Directory structure created for '$SERVICE_NAME'."

# Create basic package.json
cat <<EOF > "$SERVICE_DIR/package.json"
{
  "name": "${SERVICE_NAME}",
  "version": "1.0.0",
  "description": "A microservice for ${SERVICE_NAME}",
  "main": "dist/index.js",
  "scripts": {
    "start": "node dist/index.js",
    "dev": "nodemon src/index.ts",
    "build": "tsc",
    "test": "jest",
    "lint": "eslint src/**/*.ts",
    "format": "prettier --write src/**/*.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.14.10",
    "@typescript-eslint/eslint-plugin": "^7.16.0",
    "@typescript-eslint/parser": "^7.16.0",
    "eslint": "^8.57.0",
    "jest": "^29.7.0",
    "nodemon": "^3.1.4",
    "prettier": "^3.3.2",
    "ts-jest": "^29.2.2",
    "typescript": "^5.5.3"
  },
  "dependencies": {
    "express": "^4.19.2",
    "dotenv": "^16.4.5"
  }
}
EOF
log_success "package.json created."

# Create basic tsconfig.json
cat <<EOF > "$SERVICE_DIR/tsconfig.json"
{
  "compilerOptions": {
    "target": "es2016",
    "module": "commonjs",
    "rootDir": "./src",
    "outDir": "./dist",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "dist"]
}
EOF
log_success "tsconfig.json created."

# Create basic .env file
cat <<EOF > "$SERVICE_DIR/.env"
PORT=${SERVICE_PORT}
NODE_ENV=development
# Add other environment variables here (e.g., DATABASE_URL, API_KEY)
EOF
log_success ".env created."

# Create basic .gitignore
cat <<EOF > "$SERVICE_DIR/.gitignore"
node_modules/
dist/
.env
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.DS_Store
EOF
log_success ".gitignore created."

# Create basic src/index.ts
cat <<EOF > "$SERVICE_DIR/src/index.ts"
import express from 'express';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const PORT = process.env.PORT || ${SERVICE_PORT};

app.use(express.json());

app.get('/', (req, res) => {
  res.send('Hello from ${SERVICE_NAME}!');
});

app.listen(PORT, () => {
  console.log(`[${SERVICE_NAME}] Service running on port ${PORT}`);
});
EOF
log_success "src/index.ts created."

# Create basic Dockerfile and docker-compose.yml if GENERATE_DOCKER is true
if $GENERATE_DOCKER; then
  cat <<EOF > "$SERVICE_DIR/Dockerfile"
# Use a lightweight Node.js image
FROM node:20-alpine

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Build TypeScript code
RUN npm run build

# Expose the service port
EXPOSE ${SERVICE_PORT}

# Start the service
CMD ["npm", "start"]
EOF
  log_success "Dockerfile created."

  cat <<EOF > "$SERVICE_DIR/docker-compose.yml"
version: '3.8'

services:
  ${SERVICE_NAME}:
    build: .
    ports:
      - "${SERVICE_PORT}:${SERVICE_PORT}"
    environment:
      NODE_ENV: development
      PORT: ${SERVICE_PORT}
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev # Use nodemon for development
EOF
  log_success "docker-compose.yml created."
else
  log_warning "Skipping Dockerfile and docker-compose.yml generation."
fi

log_success "Microservice '${SERVICE_NAME}' scaffolded successfully in '$SERVICE_DIR'."
echo ""
echo "Next steps:"
echo "  cd ${SERVICE_DIR}"
echo "  npm install"
if $GENERATE_DOCKER; then
  echo "  docker-compose up --build"
else
  echo "  npm run dev"
fi
echo ""
