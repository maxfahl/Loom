
# Dockerfile.optimized

# Stage 1: Build the application
FROM node:20-alpine as builder

WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker cache
COPY app/package.json app/package-lock.json ./

# Install production dependencies
RUN npm install --production

# Copy the rest of the application source code
COPY app/. .

# Build the TypeScript application
RUN npm run build

# Stage 2: Create the final, minimal runtime image
FROM node:20-alpine

WORKDIR /app

# Copy only necessary files from the builder stage
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/dist ./dist

# Expose the port the app runs on
EXPOSE 3000

# Run as a non-root user for security
# Create a non-root user and group
RUN addgroup --system appgroup && adduser --system --ingroup appgroup appuser
USER appuser

# Define the command to run the application
CMD ["node", "dist/index.js"]
