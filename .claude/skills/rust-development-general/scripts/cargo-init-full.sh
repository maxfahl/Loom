#!/bin/bash
# cargo-init-full.sh
#
# Description:
#   A comprehensive project initializer for Rust projects. It sets up a new Cargo
#   project with common best practices, including a .gitignore, rustfmt.toml,
#   clippy.toml, and a basic test structure.
#
# Usage:
#   ./cargo-init-full.sh <project_name> [--lib | --bin]
#
# Arguments:
#   <project_name>  The name of the new Rust project.
#   --lib           (Optional) Initialize as a library crate.
#   --bin           (Optional) Initialize as a binary crate (default).
#
# Examples:
#   ./cargo-init-full.sh my_awesome_app
#   ./cargo-init-full.sh my_awesome_lib --lib
#
# Configuration:
#   None directly. Relies on Cargo's default behavior and creates standard config files.
#
# Error Handling:
#   Exits if project name is not provided or if Cargo initialization fails.
#   Provides informative messages for each step.

set -euo pipefail

PROJECT_NAME=""
CRATE_TYPE="--bin" # Default to binary crate

# --- Helper Functions ---
print_help() {
    echo "Usage: $0 <project_name> [--lib | --bin]"
    echo ""
    echo "Arguments:"
    echo "  <project_name>  The name of the new Rust project."
    echo "  --lib           (Optional) Initialize as a library crate."
    echo "  --bin           (Optional) Initialize as a binary crate (default)."
    echo ""
    echo "Examples:"
    echo "  $0 my_awesome_app"
    echo "  $0 my_awesome_lib --lib"
    exit 0
}

# --- Argument Parsing ---
if [[ $# -eq 0 ]]; then
    echo "Error: Project name is required."
    print_help
fi

PROJECT_NAME="$1"
shift

while [[ $# -gt 0 ]]; do
    case "$1" in
        --lib)
            CRATE_TYPE="--lib"
            ;;
        --bin)
            CRATE_TYPE="--bin"
            ;;
        -h|--help)
            print_help
            ;;
        *)
            echo "Error: Unknown option '$1'"
            print_help
            ;;
    esac
    shift
done

# --- Main Logic ---
echo "üöÄ Initializing new Rust project: $PROJECT_NAME ($CRATE_TYPE crate)"

# 1. Create new Cargo project
if cargo new "$PROJECT_NAME" "$CRATE_TYPE"; then
    echo "‚úÖ Cargo project '$PROJECT_NAME' created successfully."
else
    echo "‚ùå Failed to create Cargo project '$PROJECT_NAME'."
    exit 1
fi

cd "$PROJECT_NAME"

# 2. Add .gitignore
echo "üìù Adding .gitignore..."
cat << EOF > .gitignore
# Generated by cargo-init-full.sh

# Rust
/target/
**/*.rs.bk
**/*.swp
**/*.swo

# IDEs
.idea/
.vscode/
.DS_Store

# OS
.env
.env.*
EOF
echo "‚úÖ .gitignore added."

# 3. Add rustfmt.toml
echo "üé® Adding rustfmt.toml..."
cat << EOF > rustfmt.toml
# rustfmt.toml
# Configuration for Rustfmt, the Rust code formatter.
# For more options, see https://rust-lang.github.io/rustfmt/
max_width = 100
hard_tabs = false
tab_spaces = 4
newline_style = "Unix"
use_small_heuristics = "Max"
imports_granularity = "Module"
group_imports = "StdExternalCrate"
wrap_comments = true
EOF
echo "‚úÖ rustfmt.toml added."

# 4. Add clippy.toml (optional, for custom lints if needed)
echo "üîç Adding clippy.toml (optional, for custom lints)..."
cat << EOF > clippy.toml
# clippy.toml
# Configuration for Clippy, the Rust linter.
# Add custom lint configurations here if needed.
# Example:
# warn-on-all = true
# allow = ["clippy::too_many_arguments"]
EOF
echo "‚úÖ clippy.toml added."

# 5. Add basic test structure (integration tests)
echo "üß™ Setting up basic test structure..."
mkdir -p tests
if [[ "$CRATE_TYPE" == "--lib" ]]; then
    # For library crates, add a simple integration test
    cat << EOF > tests/integration_test.rs
// tests/integration_test.rs
//
// Basic integration test for the library.
// To run: cargo test --test integration_test

#[test]
fn it_adds_two() {
    assert_eq!(4, ${PROJECT_NAME}::add_two(2));
}
EOF
    # Add a dummy function to lib.rs for the integration test to pass
    if ! grep -q "pub fn add_two(a: i32) -> i32" src/lib.rs; then
        echo "pub fn add_two(a: i32) -> i32 { a + 2 }" >> src/lib.rs
        echo "Added dummy 'add_two' function to src/lib.rs for integration test."
    fi
else
    # For binary crates, a simple integration test might not be as straightforward
    # but we can still create the directory.
    echo "No specific integration test boilerplate added for binary crate, but 'tests/' directory is ready."
fi
echo "‚úÖ Test structure set up."

echo "üéâ Project '$PROJECT_NAME' initialized successfully with best practices!"
echo "Next steps:"
echo "  cd $PROJECT_NAME"
echo "  cargo build"
echo "  cargo test"
echo "  cargo fmt"
echo "  cargo clippy"
