#!/usr/bin/env node
/**
 * AML Initialization Script
 *
 * Initializes the Agent Memory & Learning System directory structure
 * and creates default configuration files.
 *
 * Usage:
 *   node src/aml/init-aml.ts [storage-path]
 *   or
 *   npm run aml:init [storage-path]
 */

import { initializeAML, DEFAULT_AML_CONFIG, AML_STATUS } from './index';
import * as fs from 'fs/promises';
import * as path from 'path';

async function initializeDirectoryStructure(basePath: string): Promise<void> {
  console.log('📁 Creating AML directory structure...\n');

  const directories = [
    basePath,
    path.join(basePath, 'global'),
    path.join(basePath, 'audit'),
    path.join(basePath, 'backup'),
  ];

  for (const dir of directories) {
    await fs.mkdir(dir, { recursive: true });
    console.log(`  ✓ Created ${dir}`);
  }
}

async function createDefaultConfig(basePath: string): Promise<void> {
  console.log('\n⚙️  Creating default configuration...\n');

  const configPath = path.join(basePath, 'config.json');

  // Check if config already exists
  try {
    await fs.access(configPath);
    console.log(`  ℹ️  Configuration already exists at ${configPath}`);
    return;
  } catch {
    // Config doesn't exist, create it
  }

  await fs.writeFile(configPath, JSON.stringify(DEFAULT_AML_CONFIG, null, 2));
  console.log(`  ✓ Created configuration at ${configPath}`);
}

async function createReadme(basePath: string): Promise<void> {
  console.log('\n📝 Creating README...\n');

  const readmePath = path.join(basePath, 'README.md');

  const readme = `# Agent Memory & Learning System (AML)

This directory contains the persistent memory storage for Loom's AI agents.

## Structure

\`\`\`
.loom/memory/
├── config.json           # Global AML configuration
├── global/               # Cross-agent shared memory
│   ├── cross-agent.json  # Patterns shared across agents
│   └── project-meta.json # Project-level learnings
├── audit/                # Audit logs for compliance
├── backup/               # Automated backups
└── [agent-name]/         # Per-agent memory
    ├── patterns.json     # Successful implementation patterns
    ├── solutions.json    # Error resolutions
    ├── decisions.json    # Architecture decisions
    ├── metrics.json      # Performance metrics
    └── context.json      # Project-specific context
\`\`\`

## Features

- **Pattern Learning**: Agents remember successful implementation patterns
- **Error Resolution**: Solutions to common errors are cached
- **Decision Tracking**: Architecture decisions and outcomes recorded
- **Performance Metrics**: Query latency, cache hit rates, success rates
- **Automatic Pruning**: Low-value patterns automatically removed
- **Encrypted Backups**: Scheduled backups with encryption support
- **Audit Logging**: GDPR-compliant audit trail

## Configuration

Edit \`config.json\` to customize AML behavior:

- \`enabled\`: Enable/disable AML globally
- \`storage\`: Storage backend and limits
- \`learning\`: Learning rate and thresholds
- \`pruning\`: Memory cleanup settings
- \`performance\`: Cache and query tuning

## Usage

### From Agent Templates

Agents automatically use AML when enabled. Query patterns before execution:

\`\`\`typescript
const patterns = await memoryService.queryPatterns('frontend-developer', {
  type: 'react-optimization',
  minConfidence: 0.7,
  limit: 5
});
\`\`\`

### From Commands

Use AML commands to manage memory:

- \`/aml-status\`: View memory statistics
- \`/aml-export [agent]\`: Export memory for backup
- \`/aml-reset [agent]\`: Clear agent memory
- \`/aml-train [file]\`: Import patterns

## Performance

Current Status: ${AML_STATUS.status}

- Query Latency: ${AML_STATUS.performanceTargets.queryLatency}
- Write Latency: ${AML_STATUS.performanceTargets.writeLatency}
- Cache Hit Rate: ${AML_STATUS.performanceTargets.cacheHitRate}

## Security

- Sensitive data automatically anonymized
- AES-256-GCM encryption for backups
- Audit logs for compliance (GDPR, CCPA)
- Opt-out controls at global/agent/pattern levels

## Version

AML Version: ${AML_STATUS.version}
Phase: ${AML_STATUS.phase}

---

*Generated by Loom AML Initialization*
*For more information, see the implementation plan at tmp/AML_IMPLEMENTATION_PLAN.md*
`;

  await fs.writeFile(readmePath, readme);
  console.log(`  ✓ Created README at ${readmePath}`);
}

async function main() {
  const storagePath = process.argv[2] || '.loom/memory';

  console.log('╔═══════════════════════════════════════════════════════════╗');
  console.log('║   Agent Memory & Learning System (AML) - Initialization   ║');
  console.log('╚═══════════════════════════════════════════════════════════╝\n');

  console.log(`Storage Path: ${path.resolve(storagePath)}\n`);

  try {
    // Step 1: Create directory structure
    await initializeDirectoryStructure(storagePath);

    // Step 2: Create default configuration
    await createDefaultConfig(storagePath);

    // Step 3: Create README
    await createReadme(storagePath);

    // Step 4: Initialize AML service
    console.log('\n🚀 Initializing AML service...\n');
    const service = await initializeAML(storagePath);
    console.log('  ✓ AML service initialized');

    // Success message
    console.log('\n╔═══════════════════════════════════════════════════════════╗');
    console.log('║                    ✅ SUCCESS!                             ║');
    console.log('╚═══════════════════════════════════════════════════════════╝');
    console.log('\nAML is now ready to use!\n');
    console.log('Next steps:');
    console.log('  1. Review configuration in .loom/memory/config.json');
    console.log('  2. Enable AML in agent templates (add aml_enabled: true)');
    console.log('  3. Start using /dev, /review, and other commands');
    console.log('  4. Monitor with /aml-status\n');

    console.log(`System Information:`);
    console.log(`  Version: ${AML_STATUS.version}`);
    console.log(`  Phase: ${AML_STATUS.phase}`);
    console.log(`  Status: ${AML_STATUS.status}`);
    console.log(`  Next Phase: ${AML_STATUS.nextPhase}\n`);

  } catch (error) {
    console.error('\n❌ ERROR: AML initialization failed\n');
    console.error((error as Error).message);
    process.exit(1);
  }
}

// Run if executed directly
if (require.main === module) {
  main().catch(console.error);
}

export { main as initAML };
